plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.16-beta'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

abstract class TeaConDumpPathToGitHub extends DefaultTask {
    @Input
    abstract Property<String> getPublishName()
    @InputFile
    abstract RegularFileProperty getTargetFile()
    @TaskAction
    void dump() {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = targetFile.getAsFile().get()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${publishName.get()}"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

base {
    archivesName = 'XKDeco-NeoForge'
}
version = "${minecraft_version}-NeoForge-${mod_version}"
group = "${mod_base_package}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

var realVersion = mod_version + '+neoforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    // Enable access transformers
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        xkdeco {
            sourceSet(sourceSets.main)
        }
    }
    runs {
        client {
            client()
            gameDirectory = project.file('run_client')
//            property 'production', 'true'
            systemProperty 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // These arguments allow for optional authentication with Mojang servers.
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
            // By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                programArguments.addAll('--uuid', project.getProperty('mc_uuid'))
            }
            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                programArguments.addAll('--username', project.getProperty('mc_username'))
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
                // You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
                programArguments.addAll('--accessToken', project.getProperty('mc_accessToken'))
            }

            // Add mixin config to runtime
            // programArgument('-mixin.config=' + project.getProperty('mod_id') + '.mixins.json')
            // programArgument('-mixin.config=' + project.getProperty('mod_id') + '.data.mixins.json')
        }

        server {
            server()
            gameDirectory = project.file('run_server')
//            property 'production', 'true'
            systemProperty 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            systemProperty 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            // programArgument('-mixin.config=' + project.getProperty('mod_id') + '.mixins.json')
            programArgument('-mixin.config=' + project.getProperty('mod_id') + '.data.mixins.json')
        }

        data {
            data()
            gameDirectory = project.file('run_data')
//            property 'production', 'true'
            systemProperty 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            systemProperty 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            // programArgument('-mixin.config=' + project.getProperty('mod_id') + '.mixins.json')
            programArgument('-mixin.config=' + project.getProperty('mod_id') + '.data.mixins.json')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll('--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets.main.resources { srcDir 'src/kiwi_generated/resources' }

repositories {
    maven { url = 'https://maven.neoforged.net/releases' }
    maven { url = "https://maven.su5ed.dev/releases" }
    maven { url "https://api.modrinth.com/maven" }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://maven.blamejared.com' }
    maven { url = "https://maven.theillusivec4.top/" }
    mavenLocal() // YES
}

dependencies {
    /*
    // https://modrinth.com/mod/jei/versions
    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    implementation(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"
     */
    // TODO[3TUSK]: Hardcoded for now.
    //  This is a custom build, published to mavenLocal().
    jarJar(implementation(annotationProcessor("snownee.kiwi:Kiwi:1.21.1-NeoForge-15.2.0-alpha")))
    /*
    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"))
    // https://modrinth.com/mod/jade/versions
    implementation fg.deobf("maven.modrinth:jade:11.9.4+forge")
    // implementation fg.deobf("maven.modrinth:uBKACKpl:qk7bNI3G") //shimmer

    implementation fg.deobf("maven.modrinth:debugutils:1.20.1-1.0.3-forge")
    // https://modrinth.com/mod/modernfix/versions
    implementation fg.deobf("maven.modrinth:modernfix:j5VhGcov")
    // https://modrinth.com/mod/ferrite-core/versions
    implementation fg.deobf("maven.modrinth:ferrite-core:DG5Fn9Sz")
    implementation fg.deobf("maven.modrinth:suggestion-tweaker:1.20-1.5.1+forge")
    */

    implementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.102.0+2.0.12+1.21.1"
    implementation "org.sinytra.forgified-fabric-api:fabric-data-generation-api-v1:20.2.16+ed29d49bd1"
    implementation "org.sinytra.forgified-fabric-api:fabric-transfer-api-v1:5.1.16+7f12564fd1"
    //implementation "dev.su5ed.sinytra:fabric-loader:2.7.4+0.15.3+1.20.1"

}

processResources {
    from('src/main/java') {
        include '**/*.json'
    }

    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            jsonMinified++
            def oldLength = it.length()
            //noinspection UnnecessaryQualifiedReference
            it.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(it))
            jsonBytesSaved += oldLength - it.length()
        }

        jsonBytesSaved = Math.round(jsonBytesSaved / 1024)
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + 'KB. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

tasks.jarJar.configure {
    // TODO[3TUSK]: I don't know if it is possible to exclude these?
    //exclude("/assets/${project.mod_id}/lang/en_us.existing.json")
    //exclude("/assets/test")
    //exclude("/org/teacon/xkdeco/data")
    //exclude("/org/teacon/xkdeco/mixin/data")
    //exclude("/.cache")
    //exclude("/xkdeco.data.mixins.json")
}

jar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "XKDeco-NeoForge-1.21"

            artifact jar
            pom {
                name = 'XKDeco for Minecraft 1.21 and NeoForge'
                description = "XeKr's decoration blocks"
                url = 'https://github.com/teaconmc/XKDeco'
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/teaconmc/XKDeco/issues'
                }
                scm {
                    url = 'https://github.com/teaconmc/XKDeco'
                    connection = 'scm:git:git://github.com/teaconmc/XKDeco.git'
                    developerConnection = 'scm:git:git@github.com:teaconmc/XKDeco.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "teacon"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.env.ARCHIVE_ACCESS_KEY && System.env.ARCHIVE_SECRET_KEY
    }
}

tasks.register("githubActionOutput", TeaConDumpPathToGitHub) { task ->
    task.onlyIf {
        System.env.GITHUB_ACTIONS
    }
    task.getPublishName().set("${jar.archiveBaseName.get()}-${version}.jar")
    task.getTargetFile().set(jar.archiveFile)
}

// TODO We will come back later for publication on CurseForge / Modrinth.
/*
unifiedPublishing {
    project {
        displayName = "[Forge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : ""
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.20.1"]
        gameLoaders = ["forge", "neoforge"]

        mainPublication tasks.jarJar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "497637" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
//                    includes "kiwi"
                }
            }
        }

        if (System.getenv("CURSE_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "XlwMlNhH" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
//                    includes "kiwi"
                }
            }
        }
    }
}
 */
